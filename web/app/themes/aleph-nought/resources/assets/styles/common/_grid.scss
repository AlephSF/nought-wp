/* breakpoints */
// xs: 0    - 500
// sm: 501  - 767
// md: 768  - 1024
// lg: 1025 +

$breakpoints: (
  "sm-up": (min-width: 501px),
  "md-up": (min-width: 768px),
  "lg-up": (min-width: 1025px),
  "xs-down": (max-width: 500.98px),
  "sm-down": (max-width: 768.98px),
  "md-down": (max-width: 1024.98px),
) !default;

/// Mixin to manage responsive breakpoints
/// @author Hugo Giraudel
/// @param {String} $breakpoint - Breakpoint name
/// @require $breakpoints
@mixin breakpoint($breakpoint) {
  // If the key exists in the map
  @if map-has-key($breakpoints, $breakpoint) {
    // Prints a media query based on the value
    @media #{inspect(map-get($breakpoints, $breakpoint))} {
      @content;
    }
  }

  // If the key doesn't exist in the map
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
      + "Available breakpoints are: #{map-keys($breakpoints)}.";
  }
}

@mixin breakpointOnly($breakpointMin, $breakpointMax) {
  // If the key exists in the map
  @if map-has-key($breakpoints, $breakpointMin) and map-has-key($breakpoints, $breakpointMax) {
    // Prints a media query based on the value
    @media #{inspect(map-get($breakpoints, $breakpointMin))} and #{inspect(map-get($breakpoints, $breakpointMax))} {
      @content;
    }
  }

  // If the key doesn't exist in the map
  @else {
    @warn "Unfortunately, no value could be retrieved from either `#{$breakpointMin}` or `#{$breakpointMax}`. "
      + "Available breakpoints are: #{map-keys($breakpoints)}.";
  }
}

@mixin makeGrid($cols-d: 12, $cols-t: 9, $cols-m: 5) {
  display: grid;
  grid-template-columns: repeat($cols-d, 1fr);
  row-gap: 0;
  column-gap: $grid-gutter-width;

  @include breakpoint(md-down) {
    grid-template-columns: repeat($cols-t, 1fr);
    column-gap: $grid-gutter-width-tablet;
  }

  @include breakpoint(sm-down) {
    grid-template-columns: repeat($cols-m, 1fr);
    column-gap: $grid-gutter-width-mobile;
  }
}

@mixin makeFixedColTablet($colStart, $colEnd, $preserve: false) {
  @include breakpoint(md-down) {
    grid-column-start: $colStart;
    grid-column-end: $colEnd;
  }

  @if (not $preserve) {
    @include breakpoint(sm-down) {
      grid-column-start: 1;
      grid-column-end: 6;
    }
  }
}

@mixin makeFixedColMobile($colStart, $colEnd) {
  @include breakpoint(sm-down) {
    grid-column-start: $colStart;
    grid-column-end: $colEnd;
  }
}

@mixin container {
  width: 100%;
  max-width: $container-width + ($container-padding * 2);
  margin-right: auto;
  margin-left: auto;
  padding-right: $container-padding;
  padding-left: $container-padding;

  @include breakpoint(md-down) {
    padding-right: $container-padding-tablet;
    padding-left: $container-padding-tablet;
  }

  @include breakpoint(sm-down) {
    padding-right: $container-padding-mobile;
    padding-left: $container-padding-mobile;
  }

  .container & {
    max-width: unset;
    padding-right: 0;
    padding-left: 0;
  }
}

.container {
  @include container;
}

.grid {
  @include makeGrid;
}
